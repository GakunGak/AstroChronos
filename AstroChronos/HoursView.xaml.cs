using CoordinateSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;


namespace AstroChronos
{
    /// <summary>
    /// Interaction logic for HoursView.xaml
    /// </summary>
    public partial class HoursView : Window
    {
        public static bool checkIfOpen;
        string timeFormat = MainWindow.timeFormat;
        public DateTime date = DateTime.Now;  
        byte[] days = new byte[] { 0, 3, 6, 2, 5, 1, 4 };
        double lat = MainWindow.lat;
        double longi = MainWindow.longi;
        List<double> times = new();
        string[] hoursChaldean = new string[] { "Sun", "Venus", "Mercury", "Moon", "Saturn", "Jupiter", "Mars", "Sun", "Venus", "Mercury", "Moon", "Saturn", "Jupiter", "Mars", "Sun", "Venus", "Mercury", "Moon", "Saturn", "Jupiter", "Mars", "Sun", "Venus", "Mercury", "Moon", "Saturn", "Jupiter", "Mars", "Sun", "Venus", "Mercury", "Moon" };
        ObservableCollection<DataGridGenerator> DataGridItems = new ObservableCollection<DataGridGenerator>();

        public HoursView() {
            InitializeComponent();
            //making sure window is usable at higher than 100% scaling
            this.Height = SystemParameters.WorkArea.Height;
            GenerateHoursList();
            allHoursGrid.ItemsSource = DataGridItems;
        }

        public void GenerateHoursList() {
            datePicker.SelectedDate = date;
            Debug.WriteLine("Method started, date is: " + date);
            byte day = (byte)date.DayOfWeek;
            Coordinate c = new Coordinate(lat, longi, date);
            Coordinate cTomorrow = new Coordinate(lat, longi, date.AddDays(1));
            Coordinate cMoon = new Coordinate(lat, longi, date.AddDays(1));
            DateTime dateNow = DateTime.Now;
            DateTime getSunriseToday = ((DateTime)c.CelestialInfo.SunRise).ToLocalTime();
            DateTime getSunriseTomorrow = ((DateTime)cTomorrow.CelestialInfo.SunRise).ToLocalTime();
            DateTime getSunset = ((DateTime)c.CelestialInfo.SunSet).ToLocalTime();
            var getMoonSign = cMoon.CelestialInfo.AstrologicalSigns.EMoonSign;
            double getMoonPhase = (double)cMoon.CelestialInfo.MoonIllum.Phase;
            string getMoonPhaseName = cMoon.CelestialInfo.MoonIllum.PhaseName;
            string sunrise = getSunriseToday.ToString("h:mm tt");
            string sunset = getSunset.ToString("h:mm tt");
            string sunriseTomorrow = getSunriseTomorrow.ToString();
            TimeSpan differenceNight = getSunriseTomorrow - getSunset;
            float nightHourDuration = (float)differenceNight.TotalMinutes / 12;
            TimeSpan differenceHours = getSunset - getSunriseToday;
            float hourDuration = (float)differenceHours.TotalMinutes / 12;
            //to ensure these are cleared when function is called again before populating them again
            times.Clear();
            DataGridItems.Clear();

            double num = 0;
            for (int i = 0; i <= 11; i++) {
                times.Add(num);
                //Debug.WriteLine("Hour added: " + num);
                num += hourDuration;
            }

            for (int i = 0; i < 13; i++) {
                times.Add(num);
                //Debug.WriteLine("Night hour added: " + num);
                num += nightHourDuration;
            }


            for (int i = 0; i < times.Count - 1; i++) {
                DataGridItems.Add(new DataGridGenerator {
                    Hour_No = i + 1,
                    Start_Time = (getSunriseToday.AddMinutes(times[i]).ToString(timeFormat)),
                    End_Time = (getSunriseToday.AddMinutes(times[i + 1]).ToString(timeFormat)),
                    Hour_Ruler = hoursChaldean[i + days[day]],

                });

                moonPhase.Text = "Phase: " + getMoonPhaseName;
                moonSign.Text = "Sign: " + getMoonSign.ToString();
                sunRise.Text = "Rises: " + sunrise;
                sunSet.Text = "Sets: " + sunset;

            }

        }

        private void WindowClosing(object sender, System.ComponentModel.CancelEventArgs e) {
            checkIfOpen = false;
            Owner.Activate();
            GC.Collect();
        }

        private void ClickAbout(object sender, RoutedEventArgs e) {
            if (About.checkIfOpen == false) {
                About about_window = new About();
                about_window.Owner= this;
                about_window.Show();
                About.checkIfOpen = true;
            }
        }

        //don't blame me, blame Microsoft
        private void AutoGeneratedColumns(object sender, DataGridAutoGeneratingColumnEventArgs e) {
            if (e.Column.Header.ToString() == "Hour_No") {
                e.Column.Header = "Hour No.";
            }

            else if (e.Column.Header.ToString() == "Start_Time") {
                e.Column.Header = "Starts at:";
            }

            else if (e.Column.Header.ToString() == "End_Time") {
                e.Column.Header = "Ends at:";
            }

            else if (e.Column.Header.ToString() == "Hour_Ruler") {
                e.Column.Header = "Hour ruler:";
            }

        }

        public class DataGridGenerator
        {
            public int Hour_No { get; set; }
            public string Start_Time { get; set; }
            public string End_Time { get; set; }
            public string Hour_Ruler { get; set; }

        }

        private void KeyAndClickLogic() {

            if (datePicker.SelectedDate != null && (DateTime)datePicker.SelectedDate != date) { //second condition is to prevent unnecessary clicks
                date = (DateTime)datePicker.SelectedDate;
                GenerateHoursList();
                allHoursGrid.ItemsSource = DataGridItems;
            }
        }

        //clears previous data, generates new data 
        private void ButtonClick(object sender, RoutedEventArgs e) {

            KeyAndClickLogic();

        }

        private void SettingsClick(object sender, RoutedEventArgs e) {
            if (SettingsWindow.checkIfOpen == false) {
                SettingsWindow settingsWindow = new SettingsWindow();
                settingsWindow.Owner = this;
                SettingsWindow.checkIfOpen = true;
                settingsWindow.Show();
            }
        }

        private void GoForwardOneDay(object sender, RoutedEventArgs e) {
            date = date.AddDays(1);
            GenerateHoursList();
        }

        private void GoBackOneDay(object sender, RoutedEventArgs e) {
            date = date.AddDays(-1);
            GenerateHoursList();
        }

        private void datePicker_KeyUp(object sender, System.Windows.Input.KeyEventArgs e) {
            KeyAndClickLogic();
        }
    }


}
